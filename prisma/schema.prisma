// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  UserCourse    UserCourse[]
  Course        Course[]
  UserLesson    UserLesson[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Course {
  id           String       @id @default(cuid())
  name         String
  presentation String // markdown
  image        String
  createdAt    DateTime     @default(now())
  creatorId    String       @map("creator_id")
  creator      User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  userCourse   UserCourse[]
  Lesson       Lesson[]
}

model UserCourse {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

enum LessonState {
  HIDDEN
  PUBLISHED
  PUBLIC
}

model Lesson {
  id         String       @id @default(cuid())
  name       String
  rank       String // A string that represents the order of the lesson
  content    String // markdown
  state      LessonState  @default(HIDDEN)
  createdAt  DateTime     @default(now())
  courseId   String       @map("course_id")
  course     Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  UserLesson UserLesson[]
}

enum Progress {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model UserLesson {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  lessonId  String   @map("lesson_id")
  createdAt DateTime @default(now())
  progress  Progress @default(NOT_STARTED)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}
