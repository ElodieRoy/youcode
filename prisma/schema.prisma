generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String?      @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  canceledAt     DateTime?
  accounts       Account[]
  createdCourses Course[]
  userCourses    UserCourse[]
  userLessons    UserLesson[]
  userSessions   Session[]
}

model Course {
  id           String       @id @default(cuid())
  name         String
  presentation String
  image        String
  createdAt    DateTime     @default(now())
  creatorId    String       @map("creator_id")
  state        CourseState  @default(DRAFT)
  creator      User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  lessons      Lesson[]
  users        UserCourse[]
}

model Lesson {
  id        String       @id @default(cuid())
  name      String
  rank      String
  content   String
  state     LessonState  @default(HIDDEN)
  createdAt DateTime     @default(now())
  courseId  String       @map("course_id")
  course    Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  users     UserLesson[]
}

model UserLesson {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  lessonId  String   @map("lesson_id")
  createdAt DateTime @default(now())
  progress  Progress @default(NOT_STARTED)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model UserCourse {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

enum CourseState {
  DRAFT
  PUBLISHED
}

enum LessonState {
  HIDDEN
  PUBLISHED
  PUBLIC
}

enum Progress {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
